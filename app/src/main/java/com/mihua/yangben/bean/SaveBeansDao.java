package com.mihua.yangben.bean;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SAVE_BEANS".
 */
public class SaveBeansDao extends AbstractDao<SaveBeans, Long> {

    public static final String TABLENAME = "SAVE_BEANS";

    /**
     * Properties of entity SaveBeans.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ids = new Property(1, int.class, "ids", false, "IDS");
        public final static Property ChannelNo = new Property(2, String.class, "channelNo", false, "CHANNEL_NO");
        public final static Property Parameter = new Property(3, String.class, "parameter", false, "PARAMETER");
        public final static Property RecordId = new Property(4, int.class, "recordId", false, "RECORD_ID");
        public final static Property SampleName = new Property(5, String.class, "sampleName", false, "SAMPLE_NAME");
        public final static Property SampleNo = new Property(6, String.class, "sampleNo", false, "SAMPLE_NO");
        public final static Property Status = new Property(7, int.class, "status", false, "STATUS");
    }


    public SaveBeansDao(DaoConfig config) {
        super(config);
    }

    public SaveBeansDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"SAVE_BEANS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IDS\" INTEGER NOT NULL ," + // 1: ids
                "\"CHANNEL_NO\" TEXT," + // 2: channelNo
                "\"PARAMETER\" TEXT," + // 3: parameter
                "\"RECORD_ID\" INTEGER NOT NULL ," + // 4: recordId
                "\"SAMPLE_NAME\" TEXT," + // 5: sampleName
                "\"SAMPLE_NO\" TEXT," + // 6: sampleNo
                "\"STATUS\" INTEGER NOT NULL );"); // 7: status
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAVE_BEANS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SaveBeans entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIds());

        String channelNo = entity.getChannelNo();
        if (channelNo != null) {
            stmt.bindString(3, channelNo);
        }

        String parameter = entity.getParameter();
        if (parameter != null) {
            stmt.bindString(4, parameter);
        }
        stmt.bindLong(5, entity.getRecordId());

        String sampleName = entity.getSampleName();
        if (sampleName != null) {
            stmt.bindString(6, sampleName);
        }

        String sampleNo = entity.getSampleNo();
        if (sampleNo != null) {
            stmt.bindString(7, sampleNo);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SaveBeans entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIds());

        String channelNo = entity.getChannelNo();
        if (channelNo != null) {
            stmt.bindString(3, channelNo);
        }

        String parameter = entity.getParameter();
        if (parameter != null) {
            stmt.bindString(4, parameter);
        }
        stmt.bindLong(5, entity.getRecordId());

        String sampleName = entity.getSampleName();
        if (sampleName != null) {
            stmt.bindString(6, sampleName);
        }

        String sampleNo = entity.getSampleNo();
        if (sampleNo != null) {
            stmt.bindString(7, sampleNo);
        }
        stmt.bindLong(8, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public SaveBeans readEntity(Cursor cursor, int offset) {
        SaveBeans entity = new SaveBeans( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.getInt(offset + 1), // ids
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channelNo
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parameter
                cursor.getInt(offset + 4), // recordId
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sampleName
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // sampleNo
                cursor.getInt(offset + 7) // status
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, SaveBeans entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIds(cursor.getInt(offset + 1));
        entity.setChannelNo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParameter(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRecordId(cursor.getInt(offset + 4));
        entity.setSampleName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSampleNo(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStatus(cursor.getInt(offset + 7));
    }

    @Override
    protected final Long updateKeyAfterInsert(SaveBeans entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(SaveBeans entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SaveBeans entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
